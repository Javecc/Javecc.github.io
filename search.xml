<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>基于centos远程服务器搭建Git服务器</title>
      <link href="/2018/11/11/%E5%9F%BA%E4%BA%8Ecentos%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/11/11/%E5%9F%BA%E4%BA%8Ecentos%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面-三言两语"><a href="#写在前面-三言两语" class="headerlink" title="写在前面-三言两语"></a>写在前面-三言两语</h2><p>&emsp;&emsp;git应该是程序猿亲切又熟知的东西，通常为猿界所津津乐道，作为分布式版本控制系统中的佼佼者，她也是合格程序猿的必备良药。就在前一篇hexo博客的搭建文章中，git是我们所必备的，但是我们只知道按部就班的安装、输入命令，可是我们并不知道或者并不能准确的熟知这些指令的作用甚至不能理解什么是分布式版本控制系统。</p><p>&emsp;&emsp;当然，关于什么是git、怎样熟练使用git等这些在这我们都不会详解，因为如文题所见，今天是要记录基于远程服务器搭建属于自己的私人git服务器所遇到的坑，并提出相应解决方法。</p><p>&emsp;&emsp;其实，说到这里，有些人会表示疑惑，我们不是有github这么优秀的git托管网站嘛(全世界最大的gay网，哈哈)，为何放着现成的稳定远程仓库不用，非要自己费劲搭建git服务器？当我们自己在多台电脑协同工作时(比如白天实验室，晚上宿舍)，怎样实时同步仓库呢，当然，github当然很完美作为公网免费服务器很方便，但是，但是如果我工作的一些内容是比较私密的，我并不想直接放在github的public库上被所有人可见，而且我也不想付费买私人仓库，所以在自己服务器上搭建git服务器是不二选择。</p><a id="more"></a><h2 id="搭建步骤-amp-三两坑"><a href="#搭建步骤-amp-三两坑" class="headerlink" title="搭建步骤&amp;三两坑"></a>搭建步骤&amp;三两坑</h2><h3 id="基于centos搭建为例"><a href="#基于centos搭建为例" class="headerlink" title="基于centos搭建为例"></a>基于centos搭建为例</h3><ul><li>安装Git<br><code>yum install git</code></li><li>设置git信息<br><code># 设置你的用户名 git config --global user.name &quot;×××&quot;</code><br><code># 设置你的邮箱 git config --global user.email &quot;××@××.com&quot;</code></li><li>创建git用户组和用户(专门用于放置git仓库)<br><code>groupadd git</code><br><code>useradd git -g git</code>  #当然这两个命令需要root权限</li><li>创建证书登录<br>收集所有需要登录的用户的公钥，公钥位于你本地电脑.ssh目录的id_rsa.pub文件中，<strong>将其复制到服务器端/home/git/.ssh/authorized_keys文件里</strong>，一行一个(其实是一段一个)；一般服务器端是没有这个文件夹的，所以需要新建:<br><code>cd /home/git/</code><br><code>mkdir .ssh</code><br><code>chomd 755 .ssh</code> #设置权限：拥有者有读、写、执行权限；属组用户和其他用户只有读、执行权限<br><code>touch .ssh/authorized_keys</code><br><code>chomd 644 .ssh/authorized_keys</code> #设置权限：只有拥有者有读写权限；属组用户和其他用户只有读权限</li><li>初始化Git仓库<br>首先选定一个目录作为git仓库，假定是/home/git/gitrepo/.git，注意执行接下来的命令之前你需要：su git将用户切换到刚创建的git用户。<br><code>mkdir gitrepo</code><br><code>chown git:git gitrepo/</code> #切换过用户即可不用<br><code>cd gitrepo</code><br><code>git init</code> #经过多次实验，用该条命令即可<br><code>chown -R git:git .git</code> #将git空仓库所属用户改为git</li></ul><h3 id="本地仓库测试"><a href="#本地仓库测试" class="headerlink" title="本地仓库测试"></a>本地仓库测试</h3><ul><li>创建远程关联<br>因为上面已经将本地ssh放上服务器，所以在本地仓库要和服务器仓库设置一个远程关联。<br><code>cd /home/username/repo</code> #进入本地的仓库目录<br><code>git remote -v</code> #查看已有的远程关联，发现为空<br><code>git remote add centos_origin git@ip:/home/git/repo/.git</code> #新建本仓库的远程关联，ip是你服务器的ip地址<br><code>git remote -v</code> #这时候你会发现多了你刚才创建的关联<br><code>git remote remove  centos_origin</code> #该命令用于删除你想删除的关联，供参考</li><li>克隆仓库<br><code>git clone git@ip:/home/git/gitrepo/.git</code><br>恩，克隆不会出现问题，线上的文件会成功克隆下来，你会欣喜，但是事情远远不止这么简单！</li><li>push本地仓库到远程<br><code>git push -u centos_origin master</code></li><li><strong>问题1</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">error:Could not read from remote repository.Please make sure you have the correct access rights and the repository exists.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>它说需要确保仓库存在，一般这种情况是你权限的问题，前面已经提醒过，一定要将新建的git仓库用户设置位git，否则在push的时候是没有读写权限的。</p><ul><li><strong>问题2</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: insufficient permission for adding an object to repository database</span><br></pre></td></tr></table></figure></li></ul><p>这种情况一般是远程关联的路径出错，确保在本地仓库的<strong>.git/config文件</strong>中的<strong>url参数</strong>是以<strong>/.git</strong>结尾</p><ul><li><strong>问题3</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">error:更新被拒绝,因为远程仓库包含您本地尚不存在的提交</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>这种情况通常是服务器上的仓库比当前本地仓库的内容先进，所以使用：<strong>git pull</strong>将远程库拉下来与本地仓库合并再push即可</p><ul><li><strong>问题4</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">error:refusing to update check out branch: ...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>远程库拒绝更新，是因为远程仓库默认是拒绝push的，所以在服务器上的.git/config文件中，在最后添加参数，更改默认模式：<br><code>[receive] denyCurrentBranch=ignore</code></p><ul><li><strong>问题5</strong><br>在你本地仓库好不容易push成功时，TM的结果你去git服务器上查看仓库目录，却空空如也，这就很恼火了。明明显示push成功，在服务器端通过<strong>git log</strong>也能看到push的记录，怎么就看不见push上来的仓库文件夹呢？你再用<strong>git status</strong>，你会发现有很多关于你push的仓库的一些记录，总算看见仓库消息。别急，先思考一下，你push上来的仓库其实到了<strong>.git的stage里</strong>(版本库的暂存区)，这时候你不能急着commit，因为commit是将仓库提交到master中。使用<strong>git clone .git repo</strong>将.git里的文件克隆出来，这里的repo是你要存的文件夹名。ok，回车，ls一下，你就看见了你push的仓库，美滋滋！</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;总算大功告成，这下就可以在另外一台电脑上和私有git服务器复制ssh keys创建remote关联，然后clone仓库，pull同步就可以正常协同工作了。祝好！</p>]]></content>
      
      
      <categories>
          
          <category> Git-殊途同归 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux-centos </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blog进阶之旅-NexT主题</title>
      <link href="/2018/11/07/blog%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%97%85-NexT%E4%B8%BB%E9%A2%98/"/>
      <url>/2018/11/07/blog%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%97%85-NexT%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> BLOG-博途荦确 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>blog进阶之旅-hexo的使用</title>
      <link href="/2018/11/07/blog%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%97%85-hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/11/07/blog%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%97%85-hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> BLOG-博途荦确 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux环境基于hexo+github搭建个人博客</title>
      <link href="/2018/11/04/Linux%E7%8E%AF%E5%A2%83%E5%9F%BA%E4%BA%8Ehexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/04/Linux%E7%8E%AF%E5%A2%83%E5%9F%BA%E4%BA%8Ehexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="三言两语-写在前面"><a href="#三言两语-写在前面" class="headerlink" title="三言两语-写在前面"></a>三言两语-写在前面</h2><p>&emsp;&emsp;每篇博客就像是珍藏已久的佳酿，编者总会急于与他人分享，但又仿佛是篇故事，情节太长竟难以三言两语而表之。作为新博客的第一篇博文，博主总是在思索该如何在用这篇技术博文搭建的博客里写下这篇技术博文，这听起来有点像递归，可如杨宗纬《这一路走来》中“这一路走来，说不上多辛苦，庆幸心里很清楚，是因为还有一点在乎，才执着这段旅途”所唱，人生何尝不识一场孤独的递归。</p><p>&emsp;&emsp;孤独的人总是坚持，就像是痛苦比怯懦更接近勇敢，搭建博客途中的每一次填坑都让人艰苦但幸福，所以我把这系列文章分为同一类–“博途荦确”，愿每个coder都岁月无殇，坑有所长。</p><a id="more"></a><h2 id="开始前你需要知道的"><a href="#开始前你需要知道的" class="headerlink" title="开始前你需要知道的"></a>开始前你需要知道的</h2><p>&emsp;&emsp;由于博主最近刚入坑Linux，其实Linux的手感还是让人流连忘返的，就感觉是新进的桃花源，无疑这个OS世界对很多Windows User来说是很不适应的(码农会好些)，比如对于一些基本软件的安装过程就很繁琐。重点是由于Linux没有与Windows兼容的用起来舒适的笔记软件，所以在填坑的过程中所得经验和总结都无法很好的记录下来(总不可能每次都使用word记录吧，凌乱且无美感)，于是就有了利用hexo+github搭建博客的想法，方便用来记录平时的笔记。  </p><p>&emsp;&emsp;现在更多的教程是在Windows下搭建静态博客，而博主在Linux平台上搭建时所遇一些坑是不常见的，所以用以志之，如果有些坑恰好如你所用，那就起到很大作用。本篇博文更偏重于对整体流程的顺畅性以及坑的解决方法，而不会着太多笔墨于软件的安装步骤。如果这篇博文恰好适合你，OK，let’s go，花上三两个时辰搭建your only blog。</p><h3 id="所需软件和平台"><a href="#所需软件和平台" class="headerlink" title="所需软件和平台"></a>所需软件和平台</h3><p>Node.js、git、hexo、github</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>&emsp;&emsp;<strong>Node.js</strong>是一个基于Chrome V8引擎的JavaScript运行环境。Node.js使用了一个时间驱动、非阻塞式I/O的模型，使其轻量又高效。这是官方的描述语言，其实对于暂时不深入的人来说，就简单理解为一个js运行环境，为什么在这里我们需要她呢，因为我们使用的博客框架hexo是用js编写的，需要一个js运行环境来装载。<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a></p><h4 id="github-amp-git"><a href="#github-amp-git" class="headerlink" title="github &amp; git"></a>github &amp; git</h4><p>&emsp;&emsp;<strong>git</strong>是一个开源的分布式版本控制系统，可以有效、高效的管理从小到非常大的项目版本管理。<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a>，(值得注意的是，她的作者同样是Linux的作者Linus)</p><p>&emsp;&emsp;<strong>github</strong>则是一个面向开源及私有软件项目的托管平台，因为只支持git作为唯一的版本库格式进行托管，故名github，同样，被戏称为世界最大的基佬交流论坛。<a href="https://github.com/" target="_blank" rel="noopener">github官网</a></p><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p>&emsp;&emsp;<strong>Hexo</strong>是一个快速、简洁且高效的博客框架。她使用MarkDown(或其他渲染引擎)解析文章，是现在主流的博客框架，灵活简便且易于使用。至于hexo的使用教程官网上非常之详细，<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a>,不过博主后期也会编写其使用笔记。</p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><ul><li>在<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网</a>上下载for linux的安装包，这里需要注意一定要对应自己电脑安装的linux版本(32bit或者64bit)，否则后面会出现问题。</li><li>在/usr/local目录解压安装并改名即可<br><code>tar xf node-v8.12.0-linux-x86.tar.xz -C /usr/local</code><br><code>mv node-v8.12.0-linux-x86 nodejs</code></li><li>需要注意一个概念–npm，npm 是 JavaScript 世界的包管理工具,并且是 Node.js 平台的默认包管理工具。</li><li>安装好以后，输入命令：node -V；如果出现nodejs的版本号，那就表示安装成功了。</li><li>还有一个很关键的步骤，就是给npm和node指令设置全局软链接。因为node.js安装好以后，其对应的指令<strong>npm</strong>(用于下载js安装包)和指令<strong>node</strong>只能在nodejs的安装包目录下才能有效，要使在其他文件目录下也有效，则需要设置全局软链接。<br><code>ln -s /usr/local/nodejs/bin/node /usr/local/bin</code><br><code>ln -s /usr/local/nodejs/bin/npm /usr/local/bin</code><br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片1.png" alt="nodejs"><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3></li><li>一般在linux上是自带<strong>git</strong>的，可以使用命令<strong>git –version</strong>查看版本，如下图：<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片2.png" alt="git版本"></li><li>如果发现没有的话，直接使用<strong>apt-get</strong>下载<br><code>sudo apt-get install git</code><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3></li><li>使用终端下载hexo，千万注意，一定要在获得权限的前提下下载(即在root下或者sudo获得权限)，否则就会出现下图问题：<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片4.png" alt="hexo权限不够"></li><li>下载命令：<br><code>sudo npm install -g hexo-cli</code></li><li>如果出现下图问题，那就是在前面安装nodejs时所说的软件版本与系统版本不符。<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片3.png" alt="nodejs版本不符"></li><li>安装完成，会出现下图信息：<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片5.png" alt="hexo安装完成"></li><li>此时可以新开一个终端或者在其他路径下使用<strong>hexo</strong>命令试试，会发现：<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片6.png" alt="hexo指令问题"></li><li>看到这里，应该想一想会知道，和前面一样，要在其他路径下使用该命令，需要位该命令设置全局软链接，这里就不赘述，如图：<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片7.png" alt="hexo建立软链接"><h3 id="配置git环境"><a href="#配置git环境" class="headerlink" title="配置git环境"></a>配置git环境</h3></li><li>基础软件环境搭建好，接下来需要先初始化git环境：<br><code># 设置你的用户名 git config --global user.name &quot;Javecc&quot;</code><br><code># 设置你的邮箱 git config --global user.email &quot;qq@qq.com&quot;</code><br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片11.png" alt="配置git信息"></li><li><strong>注意：</strong>这是博主的信息，你需要配置自己的信息，否则就会将仓库创建在我帐号里来啦。<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3></li><li>终端cd到一个选定的目录(比如创建一个blog文件)，执行<strong>hexo init</strong>命令：<br><code>hexo init</code><br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片8.png" alt="初始化blog"></li><li>在blog目录下，执行如下命令，安装<strong>npm</strong>(其实前面已经使用过)：<br><code>npm install</code><br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片9.png" alt="安装npm"><h3 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h3></li><li>执行如下命令，开启hexo本地服务器，一般用于本地调试使用：<br><code>hexo s</code></li><li>开启服务器以后，浏览器中输入url<strong><a href="https://localhost:4000" target="_blank" rel="noopener">https://localhost:4000</a></strong>，即可看见：<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片10.png" alt="blog搭建成功"><h3 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h3></li><li>在你的github官网账号上新建一个仓库，注意你的仓库名称一定要和你的用户名相同，否则就会出错。如图：</li><li><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片12.png" alt="创建仓库"></li><li>需要在你的站点配置文件中添加你的blog指向的仓库，建立远程连接：<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片13.png" alt="配置文件"><br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片14.png" alt="配置信息"></li><li><strong>打码的信息是你自己的username</strong></li><li>配置成功以后就可以在浏览器中输入url<strong>username.github.io</strong>访问你的博客了，注意此时就是通过公网访问。<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片15.png" alt="blog远程连接成功"><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3></li><li>首先你需要购买一个域名，并在域名空间中解析并指向你的github仓库的ip地址。</li><li>需要在<strong>/blog/themes/landscape/source</strong>路径下新建一个文本文件，里面写入你的域名，其实就是将你的blog指向该域名。<br><img src="/2018/11/04/Linux环境基于hexo-github搭建个人博客/图片16.png" alt="新建域名文件"></li><li><p>接下来，在你的blog路径下，使用以下命令用于部署blog到github：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #用于清除默认json信息</span><br><span class="line">hexo g      #生成静态页面</span><br><span class="line">hexo d      #部署blog</span><br></pre></td></tr></table></figure></li><li><p>OK!此时，使用你自己的域名，在浏览器中便可访问你的blog啦！！！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> BLOG-博途荦确 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux-ubuntu </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
